{"version":3,"sources":["src/index.test.js"],"names":["mockData","describe","afterEach","reset","restore","it","expect","toBeTruthy","getOnce","body","headers","myCache","get","fetch","method","credentials","then","response","json","article","title","toBe","toEqual","done","Promise","all","results","length","calls","status","ok","Error","statusText","catch","reason","message","data","toBeNull"],"mappings":";;AAAA;;;;AAEA;;AACA;;;;;;AAEA,IAAMA,WAAW,CACf;AACE,QAAK,OADP;AAEE,WAAS;AAFX,CADe,EAKf;AACE,QAAK,OADP;AAEE,WAAS;AAFX,CALe,CAAjB;;AAWAC,SAAS,cAAT,EAAyB,YAAM;;AAE7BC,YAAU,YAAM;AACd,wBAAUC,KAAV;AACA,wBAAUC,OAAV;AACD,GAHD;;AAKAC,KAAG,qBAAH,EAA0B,YAAM;AAC9BC,WAAO,qBAAP,EAA0BC,UAA1B;AACD,GAFD;;AAIAF,KAAG,0DAAH,EAA+D,YAAM;AACnE,wBAAUG,OAAV,CAAkB,qBAAlB,EAAyC,EAAEC,MAAMT,SAAS,CAAT,CAAR,EAAqBU,SAAS,EAAE,gBAAgB,kBAAlB,EAA9B,EAAzC;;AAEA,QAAMC,UAAU,qBAAhB;;AAEA,WAAOA,QAAQC,GAAR,CAAY,eAAZ,EAA6B,YAAY;AAC9C,aAAOC,6BAA6B;AAClCC,gBAAQ,KAD0B;AAElCJ,iBAAS;AACP,0BAAgB;AADT,SAFyB;AAKlCK,qBAAa;AALqB,OAA7B,EAOJC,IAPI,CAOC;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,OAPD,CAAP;AAQD,KATM,EAUJF,IAVI,CAUC,UAACG,OAAD,EAAa;AACjBb,aAAOa,QAAQC,KAAf,EAAsBC,IAAtB,CAA2B,oBAA3B;AACAV,cAAQC,GAAR,CAAY,eAAZ,EAA6BI,IAA7B,CAAkC,UAACG,OAAD,EAAa;AAC7Cb,eAAOa,OAAP,EAAgBG,OAAhB,CAAwBtB,SAAS,CAAT,CAAxB;AACD,OAFD;AAGD,KAfI,CAAP;AAgBD,GArBD;;AAuBAK,KAAG,0DAAH,EAA+D,UAACkB,IAAD,EAAU;AACvE,wBAAUf,OAAV,CAAkB,qBAAlB,EAAyC,EAAEC,MAAMT,SAAS,CAAT,CAAR,EAAqBU,SAAS,EAAE,gBAAgB,kBAAlB,EAA9B,EAAzC;;AAEA,QAAMC,UAAU,qBAAhB;;AAEAa,YAAQC,GAAR,CAAY,CACVd,QAAQC,GAAR,CAAY,eAAZ,EAA6B,YAAY;AACvC,aAAOC,6BAA6B;AAClCC,gBAAQ,KAD0B;AAElCJ,iBAAS;AACP,0BAAgB;AADT,SAFyB;AAKlCK,qBAAa;AALqB,OAA7B,EAOJC,IAPI,CAOC;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,OAPD,CAAP;AAQD,KATD,CADU,EAWVP,QAAQC,GAAR,CAAY,eAAZ,EAA6B,YAAY;AACvC,aAAOC,6BAA6B;AAClCC,gBAAQ,KAD0B;AAElCJ,iBAAS;AACP,0BAAgB;AADT,SAFyB;AAKlCK,qBAAa;AALqB,OAA7B,EAOJC,IAPI,CAOC;AAAA,eAAYC,SAASC,IAAT,EAAZ;AAAA,OAPD,CAAP;AAQD,KATD,CAXU,CAAZ,EAsBGF,IAtBH,CAsBQ,UAACU,OAAD,EAAa;AACjBpB,aAAOoB,QAAQC,MAAf,EAAuBN,IAAvB,CAA4B,CAA5B;AACAf,aAAO,oBAAUsB,KAAV,CAAgB,qBAAhB,EAAuC,CAAvC,EAA0CD,MAAjD,EAAyDN,IAAzD,CAA8D,CAA9D;AACAE;AACD,KA1BH;AA2BD,GAhCD;;AAkCAlB,KAAG,kEAAH,EAAuE,YAAM;AAC3E,wBAAUG,OAAV,CAAkB,qBAAlB,EAAyC,EAAEqB,QAAQ,GAAV,EAAenB,SAAS,EAAE,gBAAgB,kBAAlB,EAAxB,EAAzC;;AAEA,QAAMC,UAAU,qBAAhB;;AAEA,WAAOA,QAAQC,GAAR,CAAY,eAAZ,EAA6B,YAAY;AAC9C,aAAOC,6BAA6B;AAClCC,gBAAQ,KAD0B;AAElCJ,iBAAS;AACP,0BAAgB;AADT,SAFyB;AAKlCK,qBAAa;AALqB,OAA7B,EAOJC,IAPI,CAOC,oBAAY;AAChB,YAAIC,SAASa,EAAb,EAAiB,OAAOb,SAASC,IAAT,EAAP;AACjB,cAAM,IAAIa,KAAJ,CAAUd,SAASe,UAAnB,CAAN;AACD,OAVI,CAAP;AAWD,KAZM,EAaJC,KAbI,CAaE,UAACC,MAAD,EAAY;AACjB5B,aAAO4B,OAAOC,OAAd,EAAuBd,IAAvB,CAA4B,uBAA5B;AACD,KAfI,CAAP;AAgBD,GArBD;;AAwBAhB,KAAG,0FAAH,EAA+F,YAAM;;AAEnG,QAAMM,UAAU,qBAAhB;;AAEA,WAAOA,QACJC,GADI,CACA,cADA,EAEJI,IAFI,CAEC,UAACoB,IAAD,EAAU;AACd9B,aAAO8B,IAAP,EAAaC,QAAb;AACD,KAJI,CAAP;AAMD,GAVD;AAYD,CAxGD","file":"index.test.js","sourcesContent":["import ClientCache from './index'\n\nimport 'isomorphic-fetch'\nimport fetchMock from 'fetch-mock'\n\nconst mockData = [\n  {\n    \"id\":\"12345\",\n    \"title\": \"test article title\"\n  },\n  {\n    \"id\":\"67890\",\n    \"title\": \"test article title 2\"\n  },\n]\n\ndescribe('client cache', () => {\n\n  afterEach(() => {\n    fetchMock.reset()\n    fetchMock.restore()\n  })\n\n  it('can be instantiated', () => {\n    expect(new ClientCache()).toBeTruthy()\n  })\n\n  it('give me the data back and cache it when not in the cache', () => {\n    fetchMock.getOnce('/api/articles/12345', { body: mockData[0], headers: { 'content-type': 'application/json' } })\n\n    const myCache = new ClientCache();\n\n    return myCache.get('article-12345', function () {\n      return fetch(`/api/articles/12345`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n      })\n        .then(response => response.json())\n    })\n      .then((article) => {\n        expect(article.title).toBe('test article title')\n        myCache.get('article-12345').then((article) => {\n          expect(article).toEqual(mockData[0])\n        })\n      })\n  })\n\n  it('will resolve all the outstandng promises as they come in', (done) => {\n    fetchMock.getOnce('/api/articles/12345', { body: mockData[0], headers: { 'content-type': 'application/json' } })\n\n    const myCache = new ClientCache();\n\n    Promise.all([\n      myCache.get('article-12345', function () {\n        return fetch(`/api/articles/12345`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'same-origin'\n        })\n          .then(response => response.json())\n      }),\n      myCache.get('article-12345', function () {\n        return fetch(`/api/articles/12345`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'same-origin'\n        })\n          .then(response => response.json())\n      })\n    ])\n      .then((results) => {\n        expect(results.length).toBe(2)\n        expect(fetchMock.calls('/api/articles/12345')[0].length).toBe(2)\n        done()\n      })\n  })\n\n  it('will give you the error if it happens when executing the request', () => {\n    fetchMock.getOnce('/api/articles/67890', { status: 500, headers: { 'content-type': 'application/json' } })\n\n    const myCache = new ClientCache();\n\n    return myCache.get('article-67890', function () {\n      return fetch(`/api/articles/67890`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'same-origin'\n      })\n        .then(response => {\n          if (response.ok) return response.json()\n          throw new Error(response.statusText)\n        })\n    })\n      .catch((reason) => {\n        expect(reason.message).toBe('Internal Server Error')\n      })\n  })\n\n\n  it('will give you null if you do a normal get with no request function and it does not exist', () => {\n\n    const myCache = new ClientCache();\n\n    return myCache\n      .get('asdfasdfasdf')\n      .then((data) => {\n        expect(data).toBeNull()\n      })\n\n  })\n\n})\n"]}